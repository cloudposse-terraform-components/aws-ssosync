name: "aws-ssosync"
# Canonical GitHub repo
github_repo: "cloudposse-terraform-components/aws-ssosync"
# Short description of this project
description: |-
  # Component: `ssosync`

  Deploys [AWS ssosync](https://github.com/awslabs/ssosync) to sync Google Groups with AWS SSO.

  AWS `ssosync` is a Lambda application that regularly manages Identity Store users.

  This component requires manual deployment by a privileged user because it deploys a role in the root or identity
  management account.

  ## Usage

  You should be able to deploy the `ssosync` component to the same account as `aws-sso`. Typically that is the `core-gbl-root` or `gbl-root` stack.

  **Stack Level**: Global **Deployment**: Must be deployed by `managers` team-member or SuperAdmin using `atmos` CLI (since this is a root account deployment). This could also be deployed in an identity management account.

  The following is an example snippet for how to use this component:

  (`stacks/catalog/aws-ssosync.yaml`)

  ```yaml
  components:
    terraform:
      ssosync:
        vars:
          enabled: true
          name: ssosync
          google_admin_email: admin@acme.com
          log_format: text
          log_level: warn
          schedule_expression: "rate(15 minutes)"
          # Filter the groups that will be synced and is optional (default: all groups)
          # This supports wild cards `*`
          google_group_match:
            - "email='developer@acme.com'"
            - "email='aws@acme.com'"
            - "name='Acme Team'"
  ```

  We recommend following a similar process to what the [AWS ssosync](https://github.com/awslabs/ssosync) documentation
  recommends.

  ### Deployment

  Overview of steps:

  1. Configure AWS IAM Identity Center
  1. Configure Google Cloud console
  1. Configure Google Admin console
  1. Deploy the `aws-ssosync` component
  1. Deploy the `aws-sso` component

  #### 1. Configure AWS IAM Identity Center (AWS SSO)

  Follow
  [AWS documentation to configure SAML and SCIM with Google Workspace and IAM Identity Center](https://docs.aws.amazon.com/singlesignon/latest/userguide/gs-gwp.html).
  Do steps 1-4. **Step 5: Google Workspace: Configure auto provisioning is impossible.**

  As part of this process, save the SCIM endpoint token and URL. Then in AWS SSM Parameter Store, create two
  `SecureString` parameters in the same account used for AWS SSO. This is usually the root account in the primary region.

  These can be found by clicking `Enable Automatic provisioning` in the AWS IAM Identity Center console.

  ```
  # Typically looks like `https://scim.us-east-2.amazonaws.com/.../scim/v2`
  /ssosync/scim_endpoint_url
  # Typically looks like a base64 encoded value
  /ssosync/scim_endpoint_access_token
  ```

  Select `Settings`, under the `Identity Source` section, copy the `Identity Store ID` and create the following parameter:

  ```
  # Typically looks like `d-000000aaaa`
  /ssosync/identity_store_id
  ```

  #### 2. Configure Google Cloud console

  Within the [Google Cloud console](https://console.cloud.google.com), we need to create a new Google Project and Service Account and enable the Admin SDK
  API. Follow these steps:

  2. Create a new project. Give the project a descriptive name such as `AWS SSO Sync`
  3. Enable Admin SDK in APIs: `APIs & Services > Enabled APIs & Services > + ENABLE APIS AND SERVICES`

  ![Enable Admin SDK](https://raw.githubusercontent.com/cloudposse-terraform-components/aws-ssosync/main/src/docs/img/admin_sdk.png)

  4. Create Service Account: `IAM & Admin > Service Accounts > Create Service Account`
    [(ref)](https://cloud.google.com/iam/docs/service-accounts-create).

  ![Create Service Account](https://raw.githubusercontent.com/cloudposse-terraform-components/aws-ssosync/main/src/docs/img/create_service_account.png)

  5. Download credentials for the new Service Account:
    `IAM & Admin > Service Accounts > select Service Account > Keys > ADD KEY > Create new key > JSON`

  ![Download Credentials](https://raw.githubusercontent.com/cloudposse-terraform-components/aws-ssosync/main/src/docs/img/dl_service_account_creds.png)
  6. Save the JSON credentials as a new `SecureString` AWS SSM parameter in the same account used for AWS SSO. Use the
    full JSON string as the value for the parameter.

  ```
  /ssosync/google_credentials
  ```

  #### 3. Configure Google Admin console

  - Open the [Google Admin console](https://admin.google.com/)
  - From your domain’s Admin console, go to `Main menu menu > Security > Access and data control > API controls`
  - In the Domain wide delegation pane, select `Manage Domain Wide Delegation`.
  - Click `Add new`.
  - In the Client ID field, enter the `Unique ID` of the Service Account created in step 2, this should be a 22 number string.
  - In the OAuth Scopes field, enter

  ```console
  https://www.googleapis.com/auth/admin.directory.group.readonly,https://www.googleapis.com/auth/admin.directory.group.member.readonly,https://www.googleapis.com/auth/admin.directory.user.readonly
  ```

  #### 4. Deploy the `aws-ssosync` component

  Make sure that all four of the following SSM parameters exist in the target account and region:

  - `/ssosync/scim_endpoint_url`
  - `/ssosync/scim_endpoint_access_token`
  - `/ssosync/identity_store_id`
  - `/ssosync/google_credentials`

  If deployed successfully, Groups and Users should be programmatically copied from the Google Workspace into AWS IAM
  Identity Center on the given schedule.

  If these Groups are not showing up, check the CloudWatch logs for the new Lambda function and refer the [FAQs](#FAQ)
  included below.

  #### 5. Deploy the `aws-sso` component

  Use the names of the Groups now provisioned programmatically in the `aws-sso` component catalog. Follow the
  [aws-sso](../aws-sso/) component documentation to deploy the `aws-sso` component.

  ### FAQ

  #### Why is the tool forked by `Benbentwo`?

  The `awslabs` tool requires AWS Secrets Managers for the Google Credentials. However, we would prefer to use AWS SSM to
  store all credentials consistency and not require AWS Secrets Manager. Therefore we've created a Pull Request and will
  point to a fork until the PR is merged.

  Ref:

  - https://github.com/awslabs/ssosync/pull/133
  - https://github.com/awslabs/ssosync/issues/93

  #### What should I use for the Google Admin Email Address?

  The Service Account created will assume the User given by `--google-admin` / `SSOSYNC_GOOGLE_ADMIN` /
  `var.google_admin_email`. Therefore, this user email must be a valid Google admin user in your organization.

  This is not the same email as the Service Account.

  If Google fails to query Groups, you may see the following error:

  ```console
  Notifying Lambda and mark this execution as Failure: googleapi: Error 404: Domain not found., notFound
  ```

  #### Common Group Name Query Error

  If filtering group names using query strings, make sure the provided string is valid. For example,
  `google_group_match: "name:aws*"` is incorrect. Instead use `google_group_match: "Name:aws*"`

  If not, you may again see the same error message:

  ```console
  Notifying Lambda and mark this execution as Failure: googleapi: Error 404: Domain not found., notFound
  ```

  Ref:

  > The specific error you are seeing is because the google api doesn't like the query string you provided for the -g
  > parameter. try -g "Name:Fuel\*"

  https://github.com/awslabs/ssosync/issues/91

  <!-- BEGINNING OF PRE-COMMIT-TERRAFORM DOCS HOOK -->
  <!-- prettier-ignore-start -->
  <!-- prettier-ignore-end -->
  <!-- END OF PRE-COMMIT-TERRAFORM DOCS HOOK -->

tags:
  - component/aws-ssosync
  - layer/identity
  - provider/aws

# Categories of this project
categories:
  - component/aws-ssosync
  - layer/identity
  - provider/aws
# License of this project
license: "APACHE2"
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse-terraform-components/aws-ssosync.svg?style=for-the-badge
    url: https://github.com/cloudposse-terraform-components/aws-ssosync/releases/latest
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
related:
  - name: "Cloud Posse Terraform Modules"
    description: Our collection of reusable Terraform modules used by our reference architectures.
    url: "https://docs.cloudposse.com/modules/"
  - name: "Atmos"
    description: "Atmos is like docker-compose but for your infrastructure"
    url: "https://atmos.tools"
contributors: [] # If included generates contribs
